# Autogenerated by `mkbuild`; DO NOT EDIT!

cmake_minimum_required(VERSION 3.12.0)
project("libndt")

include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(CheckCXXCompilerFlag)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)

if(("${WIN32}"))
  list(APPEND CMAKE_REQUIRED_LIBRARIES ws2_32 crypt32)
endif()

enable_testing()

if(("${WIN32}"))
  if(("${CMAKE_SIZEOF_VOID_P}" EQUAL 4))
    SET(MK_WIN32_ARCH "x86")
  elseif(("${CMAKE_SIZEOF_VOID_P}" EQUAL 8))
    SET(MK_WIN32_ARCH "x64")
  else()
    message(FATAL_ERROR "Neither 32 not 64 bit")
  endif()
endif()
if((${APPLE}))
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/local/include")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -L/usr/local/lib")
endif()

include(CheckFunctionExists)
include(CheckSymbolExists)
file(WRITE "libndt.hpp" "// AUTOGENERATED BY CMake! DON'T EDIT!\n\n")
file(READ "preamble.hpp" MK_AMALGAMATE_1172_0)
file(APPEND "libndt.hpp" "${MK_AMALGAMATE_1172_0}")
file(APPEND "libndt.hpp" "\n\n")
file(READ "sys.hpp" MK_AMALGAMATE_1172_1)
file(APPEND "libndt.hpp" "${MK_AMALGAMATE_1172_1}")
file(APPEND "libndt.hpp" "\n\n")
file(READ "api.hpp" MK_AMALGAMATE_1172_2)
file(APPEND "libndt.hpp" "${MK_AMALGAMATE_1172_2}")
file(APPEND "libndt.hpp" "\n\n")
file(READ "impl.hpp" MK_AMALGAMATE_1172_3)
file(APPEND "libndt.hpp" "${MK_AMALGAMATE_1172_3}")
check_function_exists(strtonum LIBNDT_HAVE_STRTONUM)
if(${LIBNDT_HAVE_STRTONUM})
  add_definitions(-DLIBNDT_HAVE_STRTONUM)
endif()
check_symbol_exists(SO_NOSIGPIPE sys/socket.h LIBNDT_HAVE_SO_NOSIGPIPE)
if(${LIBNDT_HAVE_SO_NOSIGPIPE})
  add_definitions(-DLIBNDT_HAVE_SO_NOSIGPIPE)
endif()
check_symbol_exists(MSG_NOSIGNAL sys/socket.h LIBNDT_HAVE_MSG_NOSIGNAL)
if(${LIBNDT_HAVE_MSG_NOSIGNAL})
  add_definitions(-DLIBNDT_HAVE_MSG_NOSIGNAL)
endif()

#
# argh.h
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_2350)
if("${FAILURE_2350}")
  message(FATAL_ERROR "${FAILURE_2350}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/adishavit/argh/v1.3.1/argh.h")
file(DOWNLOAD https://raw.githubusercontent.com/adishavit/argh/v1.3.1/argh.h
  "${CMAKE_BINARY_DIR}/.mkbuild/include/argh.h"
  EXPECTED_HASH SHA256=ddb7dfc18dcf90149735b76fb2cff101067453a1df1943a6911233cb7085980c
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("argh.h" MK_HAVE_HEADER_2850)
if(NOT ("${MK_HAVE_HEADER_2850}"))
  message(FATAL_ERROR "cannot find: argh.h")
endif()

#
# catch.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_3174)
if("${FAILURE_3174}")
  message(FATAL_ERROR "${FAILURE_3174}")
endif()
message(STATUS "download: https://github.com/catchorg/Catch2/releases/download/v2.8.0/catch.hpp")
file(DOWNLOAD https://github.com/catchorg/Catch2/releases/download/v2.8.0/catch.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/catch.hpp"
  EXPECTED_HASH SHA256=2791047e459b981a1035f4ee16a2ad031f5bfb4ba66487ad4d3fc816c8946f61
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("catch.hpp" MK_HAVE_HEADER_3691)
if(NOT ("${MK_HAVE_HEADER_3691}"))
  message(FATAL_ERROR "cannot find: catch.hpp")
endif()

if(("${WIN32}"))

  #
  # windows-curl-7.61.1-1.tar.gz
  #

  message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_4072)
  if("${FAILURE_4072}")
    message(FATAL_ERROR "${FAILURE_4072}")
  endif()
  message(STATUS "download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    EXPECTED_HASH SHA256=424d2f18f0f74dd6a0128f0f4e59860b7d2f00c80bbf24b2702e9cac661357cf
    TLS_VERIFY ON)
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_4895)
  if("${FAILURE_4895}")
    message(FATAL_ERROR "${FAILURE_4895}")
  endif()
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_5140)
  if(NOT ("${MK_HAVE_HEADER_5140}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib" "curl_easy_init" "" MK_HAVE_LIB_5299)
  if(NOT ("${MK_HAVE_LIB_5299}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  LIST(APPEND CMAKE_REQUIRED_DEFINITIONS -DCURL_STATICLIB)
else()
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_5857)
  if(NOT ("${MK_HAVE_HEADER_5857}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("curl" "curl_easy_init" "" MK_HAVE_LIB_6016)
  if(NOT ("${MK_HAVE_LIB_6016}"))
    message(FATAL_ERROR "cannot find: curl")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "curl")
endif()

#
# generic-assets-20190520205742.tar.gz
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_6440)
if("${FAILURE_6440}")
  message(FATAL_ERROR "${FAILURE_6440}")
endif()
message(STATUS "download: https://github.com/measurement-kit/generic-assets/releases/download/20190520205742/generic-assets-20190520205742.tar.gz")
file(DOWNLOAD https://github.com/measurement-kit/generic-assets/releases/download/20190520205742/generic-assets-20190520205742.tar.gz
  "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz"
  EXPECTED_HASH SHA256=70d590c20b2ed31fd43cc63709b267672fecfeac7e908d11e845664ddd43b04f
  TLS_VERIFY ON)
message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz"
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_7301)
if("${FAILURE_7301}")
  message(FATAL_ERROR "${FAILURE_7301}")
endif()

#
# json.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_7586)
if("${FAILURE_7586}")
  message(FATAL_ERROR "${FAILURE_7586}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/nlohmann/json/v3.6.1/single_include/nlohmann/json.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/nlohmann/json/v3.6.1/single_include/nlohmann/json.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/json.hpp"
  EXPECTED_HASH SHA256=d2eeb25d2e95bffeb08ebb7704cdffd2e8fca7113eba9a0b38d60a5c391ea09a
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("json.hpp" MK_HAVE_HEADER_8138)
if(NOT ("${MK_HAVE_HEADER_8138}"))
  message(FATAL_ERROR "cannot find: json.hpp")
endif()

if(("${WIN32}"))

  #
  # windows-libressl-2.7.4-1.tar.gz
  #

  message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_8520)
  if("${FAILURE_8520}")
    message(FATAL_ERROR "${FAILURE_8520}")
  endif()
  message(STATUS "download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-libressl-2.7.4-1.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-libressl-2.7.4-1.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libressl-2.7.4-1.tar.gz"
    EXPECTED_HASH SHA256=e800f69a97f5ae850776299dda4e1edc39edc43229cfd1c5764c56c90c2f219a
    TLS_VERIFY ON)
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libressl-2.7.4-1.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libressl-2.7.4-1.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_9358)
  if("${FAILURE_9358}")
    message(FATAL_ERROR "${FAILURE_9358}")
  endif()
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("openssl/rsa.h" MK_HAVE_HEADER_9606)
  if(NOT ("${MK_HAVE_HEADER_9606}"))
    message(FATAL_ERROR "cannot find: openssl/rsa.h")
  endif()
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/crypto.lib" "RSA_new" "" MK_HAVE_LIB_9769)
  if(NOT ("${MK_HAVE_LIB_9769}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/crypto.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/crypto.lib")
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/ssl.lib" "SSL_new" "" MK_HAVE_LIB_10260)
  if(NOT ("${MK_HAVE_LIB_10260}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/ssl.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libressl/2.7.4-1/${MK_WIN32_ARCH}/lib/ssl.lib")
else()

  if(("${APPLE}"))
    if(EXISTS "/usr/local/opt/openssl@1.1")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -I/usr/local/opt/openssl@1.1/include")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/local/opt/openssl@1.1/include")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/opt/openssl@1.1/lib")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -L/usr/local/opt/openssl@1.1/lib")
    endif()
  endif()
  CHECK_INCLUDE_FILE_CXX("openssl/rsa.h" MK_HAVE_HEADER_11207)
  if(NOT ("${MK_HAVE_HEADER_11207}"))
    message(FATAL_ERROR "cannot find: openssl/rsa.h")
  endif()
  CHECK_LIBRARY_EXISTS("crypto" "RSA_new" "" MK_HAVE_LIB_11372)
  if(NOT ("${MK_HAVE_LIB_11372}"))
    message(FATAL_ERROR "cannot find: crypto")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "crypto")
  CHECK_INCLUDE_FILE_CXX("openssl/ssl.h" MK_HAVE_HEADER_11577)
  if(NOT ("${MK_HAVE_HEADER_11577}"))
    message(FATAL_ERROR "cannot find: openssl/ssl.h")
  endif()
  CHECK_LIBRARY_EXISTS("ssl" "SSL_read" "" MK_HAVE_LIB_11742)
  if(NOT ("${MK_HAVE_LIB_11742}"))
    message(FATAL_ERROR "cannot find: ssl")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "ssl")
endif()

#
# Set restrictive compiler flags
#

macro(MKSetRestrictiveCompilerFlags)
  if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR
     ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang"))
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Werror")
    # https://www.owasp.org/index.php/C-Based_Toolchain_Hardening_Cheat_Sheet
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wall")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wextra")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wconversion")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wcast-align")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat=2")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat-security")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fno-common")
    # Some options are only supported by GCC when we're compiling C code:
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-prototypes")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-prototypes")
    else()
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wmissing-prototypes")
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wstrict-prototypes")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-declarations")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-overflow")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wtrampolines")
    endif()
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Woverloaded-virtual")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wreorder")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wsign-promo")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wnon-virtual-dtor")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fstack-protector-all")
    if(NOT "${APPLE}" AND NOT "${MINGW}")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,noexecstack")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,now")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,relro")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodlopen")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodump")
    elseif(("${MINGW}"))
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -static")
    endif()
    add_definitions(-D_FORTIFY_SOURCES=2)
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # TODO(bassosimone): add support for /Wall and /analyze
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} /WX /W4 /EHs")
    set(MK_LD_FLAGS "${MK_LD_FLAGS} /WX")
  else()
    message(FATAL_ERROR "Compiler not supported: ${CMAKE_CXX_COMPILER_ID}")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MK_COMMON_FLAGS} ${MK_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MK_COMMON_FLAGS} ${MK_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MK_LD_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MK_LD_FLAGS}")
  if("${WIN32}")
    add_definitions(-D_WIN32_WINNT=0x0600) # for NI_NUMERICSERV and WSAPoll
  endif()
endmacro()

MKSetRestrictiveCompilerFlags()

#
# Prepare for compiling targets
#

add_definitions(${CMAKE_REQUIRED_DEFINITIONS})
include_directories(${CMAKE_REQUIRED_INCLUDES})

#
# libndt-client
#

add_executable(
  libndt-client
  libndt-client.cpp api.hpp impl.hpp sys.hpp
)
target_link_libraries(
  libndt-client
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# libndt-standalone-builds
#

add_executable(
  libndt-standalone-builds
  libndt-standalone-builds.cpp libndt.hpp
)
target_link_libraries(
  libndt-standalone-builds
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# sys_test
#

add_executable(
  sys_test
  sys_test.cpp api.hpp impl.hpp sys.hpp
)
target_link_libraries(
  sys_test
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# tests-curl
#

add_executable(
  tests-curl
  curlx_test.cpp api.hpp impl.hpp sys.hpp
)
target_link_libraries(
  tests-curl
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# tests-libndt
#

add_executable(
  tests-libndt
  libndt_test.cpp api.hpp impl.hpp sys.hpp
)
target_link_libraries(
  tests-libndt
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# test: curl_unit_tests
#

add_test(
  NAME curl_unit_tests COMMAND tests-curl
)

#
# test: modern_test
#

add_test(
  NAME modern_test COMMAND libndt-client -ca-bundle-path .mkbuild/download/ca-bundle.pem -verbose -download -upload -tls -json -websocket
)

#
# test: other_unit_tests
#

add_test(
  NAME other_unit_tests COMMAND tests-libndt
)

#
# test: simple_test
#

add_test(
  NAME simple_test COMMAND libndt-client -download -upload -verbose
)

#
# test: sys_unit_tests
#

add_test(
  NAME sys_unit_tests COMMAND sys_test
)
